const axios = require('axios');
const logger = require('../logger');

const omdbUrl = 'https://www.omdbapi.com/';
const apiKey = process.env.OMDB_API_KEY;

/**
 * represents a single title returned from OMDB
 */
class OmdbTitle {
  // NOTE: in this and other classes based on OMDB data structures, I have
  //       chosen to replicate the capitalization scheme of the original rather
  //       than attempt to "correct" any inconsistencies.
  constructor(props) {
    // TODO: make properties immutable to prevent bugs when merging this data
    // with user-provided data.
    this.Title = props.Title;
    this.Year = props.Year;
    this.Rated = props.Rated;
    this.Released = props.Released;
    this.Runtime = props.Runtime;
    this.Genre = props.Genre;
    this.Director = props.Director;
    this.Writer = props.Writer;
    this.Actors = props.Actors;
    this.Plot = props.Plot;
    this.Language = props.Language;
    this.Country = props.Country;
    this.Awards = props.Awards;
    this.Poster = props.Poster;
    this.Ratings = props.Ratings;
    this.Metascore = props.Metascore;
    this.imdbRating = props.imdbRating;
    this.imdbVotes = props.imdbVotes;
    this.imdbID = props.imdbID;
    this.Type = props.Type;
    this.Response = props.Response;
  }
};

/**
 * represents a single search listing returned by OMDB search API
 */
class OmdbSearchListing {
  constructor(props) {
    this.Title = props.Title;
    this.Year = props.Year;
    this.imdbID = props.imdbID;
    this.Type = props.Type;
    this.Poster = props.Poster;
  }
};

/**
 * represents the whole response from OMDB search API.
 */
class OmdbSearchResult {
  constructor(props) {
    // This is an array of OmdbSearchListing objects.
    this.Search = props.Search;
    this.totalResults = props.totalResults;
    this.Response = props.Response;
  }
}

/**
 * represents an error generated by the OMDB API.
 */
class OmdbError extends Error {
  /**
   * @param response the axios reponse object.
   */
  constructor(response) {
    const errMsg = response.data.Error || response.statusText;
    super(errMsg);
    // error.code = HTTP response status code (404, 401, 500, etc).
    //              this can be 200 in some cases (invalid query parameters,
    //              for example)
    this.code = response.status;
  }
}

/**
 * a wrapper around the OMDB web API.
 */
class OmdbAPI {
  /**
   * helper method for calling OMDB.
   * @param {Object} params map of query string parameters
   */
  static async callOmdb(params) {
    try {
      const res = await axios.get(omdbUrl, { params });
      const req = res.request;
      logger.debug(
        `${req.protocol}//${req.host}${req.path} ` +
        `${res.status} ${res.statusText}`
      );
      if (res.data.Response === "True") {
        return res.data;
      } else {
        return null;
      }
    }
    catch (err) {
      if (err.response) {
        throw new OmdbError(err.response);
      }
      else {
        throw err;
      }
    }
  }

  /**
   * Fetch movie from OMDB, given the imdbID.
   * @param imdbID the IMDB identifier for the movie.
   * @returns {OmdbTitle}
   * @throws {OmdbError} if OMDB returns error response or none found
   */
  static async findTitleById(imdbID) {
    const data = await OmdbAPI.callOmdb({ apiKey, i: imdbID, plot: 'full' });
    return data === null ? null : new OmdbTitle(data);
  }

  /**
   * Search OMDB for movies
   * @param searchText the search query [required]
   * @param type movie, series, or episode
   * @param year filter results by year
   * @param page return this page of results
   * @returns {Array} of {OmdbSearchResult} objects
   */
  static async search(searchText, type, year, page) {
    if (!searchText) {
      throw new Error('OmdbAPI.search(): searchText is a required parameter');
    }
    const data = await OmdbAPI.callOmdb({
      apiKey,
      s: searchText,
      type,
      y: year,
      page
    });
    if (data === null) {
      return [];
    } else {
      return new OmdbSearchResult({
        Search: data.Search.map(x => { return new OmdbSearchListing(x) }),
        totalResults: data.totalResults,
        Response: data.Response,
      });
    }
  }
}

module.exports = {
  OmdbAPI,
  OmdbTitle,
  OmdbSearchListing,
  OmdbSearchResult,
  omdbUrl,
}
